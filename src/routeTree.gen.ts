/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AnimeImport } from './routes/$anime'
import { Route as IndexImport } from './routes/index'
import { Route as TopUpcomingIndexImport } from './routes/top-upcoming/index'
import { Route as RecentlyUpdatedIndexImport } from './routes/recently-updated/index'
import { Route as WatchAnimeImport } from './routes/watch/$anime'

// Create/Update Routes

const AnimeRoute = AnimeImport.update({
  id: '/$anime',
  path: '/$anime',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TopUpcomingIndexRoute = TopUpcomingIndexImport.update({
  id: '/top-upcoming/',
  path: '/top-upcoming/',
  getParentRoute: () => rootRoute,
} as any)

const RecentlyUpdatedIndexRoute = RecentlyUpdatedIndexImport.update({
  id: '/recently-updated/',
  path: '/recently-updated/',
  getParentRoute: () => rootRoute,
} as any)

const WatchAnimeRoute = WatchAnimeImport.update({
  id: '/watch/$anime',
  path: '/watch/$anime',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$anime': {
      id: '/$anime'
      path: '/$anime'
      fullPath: '/$anime'
      preLoaderRoute: typeof AnimeImport
      parentRoute: typeof rootRoute
    }
    '/watch/$anime': {
      id: '/watch/$anime'
      path: '/watch/$anime'
      fullPath: '/watch/$anime'
      preLoaderRoute: typeof WatchAnimeImport
      parentRoute: typeof rootRoute
    }
    '/recently-updated/': {
      id: '/recently-updated/'
      path: '/recently-updated'
      fullPath: '/recently-updated'
      preLoaderRoute: typeof RecentlyUpdatedIndexImport
      parentRoute: typeof rootRoute
    }
    '/top-upcoming/': {
      id: '/top-upcoming/'
      path: '/top-upcoming'
      fullPath: '/top-upcoming'
      preLoaderRoute: typeof TopUpcomingIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$anime': typeof AnimeRoute
  '/watch/$anime': typeof WatchAnimeRoute
  '/recently-updated': typeof RecentlyUpdatedIndexRoute
  '/top-upcoming': typeof TopUpcomingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$anime': typeof AnimeRoute
  '/watch/$anime': typeof WatchAnimeRoute
  '/recently-updated': typeof RecentlyUpdatedIndexRoute
  '/top-upcoming': typeof TopUpcomingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$anime': typeof AnimeRoute
  '/watch/$anime': typeof WatchAnimeRoute
  '/recently-updated/': typeof RecentlyUpdatedIndexRoute
  '/top-upcoming/': typeof TopUpcomingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$anime'
    | '/watch/$anime'
    | '/recently-updated'
    | '/top-upcoming'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$anime' | '/watch/$anime' | '/recently-updated' | '/top-upcoming'
  id:
    | '__root__'
    | '/'
    | '/$anime'
    | '/watch/$anime'
    | '/recently-updated/'
    | '/top-upcoming/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnimeRoute: typeof AnimeRoute
  WatchAnimeRoute: typeof WatchAnimeRoute
  RecentlyUpdatedIndexRoute: typeof RecentlyUpdatedIndexRoute
  TopUpcomingIndexRoute: typeof TopUpcomingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnimeRoute: AnimeRoute,
  WatchAnimeRoute: WatchAnimeRoute,
  RecentlyUpdatedIndexRoute: RecentlyUpdatedIndexRoute,
  TopUpcomingIndexRoute: TopUpcomingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$anime",
        "/watch/$anime",
        "/recently-updated/",
        "/top-upcoming/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$anime": {
      "filePath": "$anime.tsx"
    },
    "/watch/$anime": {
      "filePath": "watch/$anime.tsx"
    },
    "/recently-updated/": {
      "filePath": "recently-updated/index.tsx"
    },
    "/top-upcoming/": {
      "filePath": "top-upcoming/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
